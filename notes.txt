Progress:
================
- Inverted Pendulum
	(DONE) - Implement (Bobby)
	(DONE) - Visualize (Bobby)
	(Verified learning - just need plots)- Run Sarsa with Tabular and iFDD and check results (Kemal)
- SysAdmin 
	(DONE) - 20 machines txt file. (Kemal)
	- Check the code with Sarsa with Tabular and iFDD make sure results are good (Kemal)
- PST
	(DONE) - Visualize (Bobby)
	(DONE)- Make sure it makes sense (Bobby)
	- Check Sarsa with Tabular and iFDD (Kemal)
- Implement 
	- OMP-TD (Kemal,Bobby)
	- BEBF (Kemal,Bobby)

TO DO:
=========
MountianCar Visualization
Correct the Visualization of the Pendulum Swingup because the actions are not torques but forces to the art!
 



Bobby's Notes:
Fixed error in OnlineImplementation, referencing 's' and 'a' before defined, line 48.  Only manifests when showAll = True
Fixed bug in 'Representation' where states from continuous domains were being hashed improperly
Fixed bug in method 'binNumber' where a state at the upper-bound of the discretization would return an out-of-bounds bin. [In the example shown, # s = 0, limits = [-1,5], bins = 6 => 1, but # s = 5, limits = [-1,5], bins = 6 => 6, out of bounds since bins = [0,1,2,3,4,5]
Replaced the two lines in id2vec which compute quotient and modulo with the single fast python function 'divmod'

This might be obvious to someone familiar with RL, but given that the state 's' can be almost anything, I didn't realize that 'discretized' also implied 'integral.'  Might be worth making note of that somewhere, I mentioned it at the top of 'Domain.'







NetworkAdmin -

Soundness needs verification

Visualization will be changed; graph needs to be directed; presently nodes compete for 'good' or 'bad' edges, since the edge color is set by each node's output [i.e. if a good node and bad node are connected, the good node will attempt to set its outgoing edge green, and the bad node will attempt to set the same edge red]
